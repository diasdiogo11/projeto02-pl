
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left+-CONCATleft*/CONCAT ESCREVER LIST NUM STRING VARstatement : VAR "=" expression ";"statement : expression ";"statement : ESCREVER "(" expression ")" ";"\n                     | ESCREVER "(" STRING ")" ";"\n                     | ESCREVER "(" VAR ")" ";"expression : expression \'+\' expression\n                      | expression \'-\' expression\n                      | expression \'*\' expression\n                      | expression \'/\' expressionexpression : expression CONCAT expressionexpression : "(" expression ")"expression : NUMexpression : VARexpression : STRINGexpression : LIST'
    
_lr_action_items = {'VAR':([0,5,9,11,12,13,14,15,16,],[2,18,18,18,18,18,18,18,27,]),'ESCREVER':([0,],[4,]),'(':([0,4,5,9,11,12,13,14,15,16,],[5,16,5,5,5,5,5,5,5,5,]),'NUM':([0,5,9,11,12,13,14,15,16,],[7,7,7,7,7,7,7,7,7,]),'STRING':([0,5,9,11,12,13,14,15,16,],[6,6,6,6,6,6,6,6,26,]),'LIST':([0,5,9,11,12,13,14,15,16,],[8,8,8,8,8,8,8,8,8,]),'$end':([1,10,29,33,34,35,],[0,-2,-1,-3,-4,-5,]),'=':([2,],[9,]),';':([2,3,6,7,8,18,19,20,21,22,23,24,28,30,31,32,],[-13,10,-14,-12,-15,-13,29,-6,-7,-8,-9,-10,-11,33,34,35,]),'+':([2,3,6,7,8,17,18,19,20,21,22,23,24,25,26,27,28,],[-13,11,-14,-12,-15,11,-13,11,-6,-7,-8,-9,-10,11,-14,-13,-11,]),'-':([2,3,6,7,8,17,18,19,20,21,22,23,24,25,26,27,28,],[-13,12,-14,-12,-15,12,-13,12,-6,-7,-8,-9,-10,12,-14,-13,-11,]),'*':([2,3,6,7,8,17,18,19,20,21,22,23,24,25,26,27,28,],[-13,13,-14,-12,-15,13,-13,13,13,13,-8,-9,13,13,-14,-13,-11,]),'/':([2,3,6,7,8,17,18,19,20,21,22,23,24,25,26,27,28,],[-13,14,-14,-12,-15,14,-13,14,14,14,-8,-9,14,14,-14,-13,-11,]),'CONCAT':([2,3,6,7,8,17,18,19,20,21,22,23,24,25,26,27,28,],[-13,15,-14,-12,-15,15,-13,15,-6,-7,-8,-9,-10,15,-14,-13,-11,]),')':([6,7,8,17,18,20,21,22,23,24,25,26,27,28,],[-14,-12,-15,28,-13,-6,-7,-8,-9,-10,30,31,32,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,5,9,11,12,13,14,15,16,],[3,17,19,20,21,22,23,24,25,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> VAR = expression ;','statement',4,'p_statement_assign','grammar.py',28),
  ('statement -> expression ;','statement',2,'p_statement_expr','grammar.py',32),
  ('statement -> ESCREVER ( expression ) ;','statement',5,'p_statement_write','grammar.py',36),
  ('statement -> ESCREVER ( STRING ) ;','statement',5,'p_statement_write','grammar.py',37),
  ('statement -> ESCREVER ( VAR ) ;','statement',5,'p_statement_write','grammar.py',38),
  ('expression -> expression + expression','expression',3,'p_expression_binop','grammar.py',42),
  ('expression -> expression - expression','expression',3,'p_expression_binop','grammar.py',43),
  ('expression -> expression * expression','expression',3,'p_expression_binop','grammar.py',44),
  ('expression -> expression / expression','expression',3,'p_expression_binop','grammar.py',45),
  ('expression -> expression CONCAT expression','expression',3,'p_expression_concat','grammar.py',49),
  ('expression -> ( expression )','expression',3,'p_expression_group','grammar.py',53),
  ('expression -> NUM','expression',1,'p_expression_num','grammar.py',57),
  ('expression -> VAR','expression',1,'p_expression_var','grammar.py',61),
  ('expression -> STRING','expression',1,'p_expression_string','grammar.py',65),
  ('expression -> LIST','expression',1,'p_expression_list','grammar.py',69),
]
