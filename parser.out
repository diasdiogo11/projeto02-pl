Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FIM
    FOLD
    MAP

Grammar

Rule 0     S' -> start
Rule 1     start -> statement
Rule 2     start -> expression
Rule 3     statement -> VAR = expression ;
Rule 4     statement -> expression ;
Rule 5     statement -> ESCREVER ( expression ) ;
Rule 6     statement -> ESCREVER ( STRING ) ;
Rule 7     statement -> ESCREVER ( VAR ) ;
Rule 8     expression -> expression + expression
Rule 9     expression -> expression - expression
Rule 10    expression -> expression * expression
Rule 11    expression -> expression / expression
Rule 12    expression -> expression CONCAT expression
Rule 13    expression -> ( expression )
Rule 14    expression -> NUM
Rule 15    expression -> VAR
Rule 16    expression -> STRING
Rule 17    expression -> LIST
Rule 18    expression -> ENTRADA ( )
Rule 19    expression -> ALEATORIO ( NUM )
Rule 20    expression -> ALEATORIO ( VAR )
Rule 21    expression -> FUNCAO VAR ( params ) , : expression ;
Rule 22    params -> VAR
Rule 23    params -> VAR , params
Rule 24    expression -> VAR ( arguments )
Rule 25    arguments -> expression
Rule 26    arguments -> expression , arguments
Rule 27    expression -> NEG ( expression ) ;
Rule 28    expression -> NEG ( VAR ) ;
Rule 29    expression -> NEG ( NUM ) ;

Terminals, with rules where they appear

(                    : 5 6 7 13 18 19 20 21 24 27 28 29
)                    : 5 6 7 13 18 19 20 21 24 27 28 29
*                    : 10
+                    : 8
,                    : 21 23 26
-                    : 9
/                    : 11
:                    : 21
;                    : 3 4 5 6 7 21 27 28 29
=                    : 3
ALEATORIO            : 19 20
CONCAT               : 12
ENTRADA              : 18
ESCREVER             : 5 6 7
FIM                  : 
FOLD                 : 
FUNCAO               : 21
LIST                 : 17
MAP                  : 
NEG                  : 27 28 29
NUM                  : 14 19 29
STRING               : 6 16
VAR                  : 3 7 15 20 21 22 23 24 28
error                : 

Nonterminals, with rules where they appear

arguments            : 24 26
expression           : 2 3 4 5 8 8 9 9 10 10 11 11 12 12 13 21 25 26 27
params               : 21 23
start                : 0
statement            : 1

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . statement
    (2) start -> . expression
    (3) statement -> . VAR = expression ;
    (4) statement -> . expression ;
    (5) statement -> . ESCREVER ( expression ) ;
    (6) statement -> . ESCREVER ( STRING ) ;
    (7) statement -> . ESCREVER ( VAR ) ;
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )
    (27) expression -> . NEG ( expression ) ;
    (28) expression -> . NEG ( VAR ) ;
    (29) expression -> . NEG ( NUM ) ;

    VAR             shift and go to state 4
    ESCREVER        shift and go to state 5
    (               shift and go to state 6
    NUM             shift and go to state 8
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12
    NEG             shift and go to state 13

    start                          shift and go to state 1
    statement                      shift and go to state 2
    expression                     shift and go to state 3

state 1

    (0) S' -> start .



state 2

    (1) start -> statement .

    $end            reduce using rule 1 (start -> statement .)


state 3

    (2) start -> expression .
    (4) statement -> expression . ;
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    $end            reduce using rule 2 (start -> expression .)
    ;               shift and go to state 14
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    CONCAT          shift and go to state 19


state 4

    (3) statement -> VAR . = expression ;
    (15) expression -> VAR .
    (24) expression -> VAR . ( arguments )

    =               shift and go to state 20
    ;               reduce using rule 15 (expression -> VAR .)
    +               reduce using rule 15 (expression -> VAR .)
    -               reduce using rule 15 (expression -> VAR .)
    *               reduce using rule 15 (expression -> VAR .)
    /               reduce using rule 15 (expression -> VAR .)
    CONCAT          reduce using rule 15 (expression -> VAR .)
    $end            reduce using rule 15 (expression -> VAR .)
    (               shift and go to state 21


state 5

    (5) statement -> ESCREVER . ( expression ) ;
    (6) statement -> ESCREVER . ( STRING ) ;
    (7) statement -> ESCREVER . ( VAR ) ;

    (               shift and go to state 22


state 6

    (13) expression -> ( . expression )
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )
    (27) expression -> . NEG ( expression ) ;
    (28) expression -> . NEG ( VAR ) ;
    (29) expression -> . NEG ( NUM ) ;

    (               shift and go to state 6
    NUM             shift and go to state 8
    VAR             shift and go to state 24
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12
    NEG             shift and go to state 13

    expression                     shift and go to state 23

state 7

    (16) expression -> STRING .

    ;               reduce using rule 16 (expression -> STRING .)
    +               reduce using rule 16 (expression -> STRING .)
    -               reduce using rule 16 (expression -> STRING .)
    *               reduce using rule 16 (expression -> STRING .)
    /               reduce using rule 16 (expression -> STRING .)
    CONCAT          reduce using rule 16 (expression -> STRING .)
    $end            reduce using rule 16 (expression -> STRING .)
    )               reduce using rule 16 (expression -> STRING .)
    ,               reduce using rule 16 (expression -> STRING .)


state 8

    (14) expression -> NUM .

    ;               reduce using rule 14 (expression -> NUM .)
    +               reduce using rule 14 (expression -> NUM .)
    -               reduce using rule 14 (expression -> NUM .)
    *               reduce using rule 14 (expression -> NUM .)
    /               reduce using rule 14 (expression -> NUM .)
    CONCAT          reduce using rule 14 (expression -> NUM .)
    $end            reduce using rule 14 (expression -> NUM .)
    )               reduce using rule 14 (expression -> NUM .)
    ,               reduce using rule 14 (expression -> NUM .)


state 9

    (17) expression -> LIST .

    ;               reduce using rule 17 (expression -> LIST .)
    +               reduce using rule 17 (expression -> LIST .)
    -               reduce using rule 17 (expression -> LIST .)
    *               reduce using rule 17 (expression -> LIST .)
    /               reduce using rule 17 (expression -> LIST .)
    CONCAT          reduce using rule 17 (expression -> LIST .)
    $end            reduce using rule 17 (expression -> LIST .)
    )               reduce using rule 17 (expression -> LIST .)
    ,               reduce using rule 17 (expression -> LIST .)


state 10

    (18) expression -> ENTRADA . ( )

    (               shift and go to state 25


state 11

    (19) expression -> ALEATORIO . ( NUM )
    (20) expression -> ALEATORIO . ( VAR )

    (               shift and go to state 26


state 12

    (21) expression -> FUNCAO . VAR ( params ) , : expression ;

    VAR             shift and go to state 27


state 13

    (27) expression -> NEG . ( expression ) ;
    (28) expression -> NEG . ( VAR ) ;
    (29) expression -> NEG . ( NUM ) ;

    (               shift and go to state 28


state 14

    (4) statement -> expression ; .

    $end            reduce using rule 4 (statement -> expression ; .)


state 15

    (8) expression -> expression + . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )
    (27) expression -> . NEG ( expression ) ;
    (28) expression -> . NEG ( VAR ) ;
    (29) expression -> . NEG ( NUM ) ;

    (               shift and go to state 6
    NUM             shift and go to state 8
    VAR             shift and go to state 24
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12
    NEG             shift and go to state 13

    expression                     shift and go to state 29

state 16

    (9) expression -> expression - . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )
    (27) expression -> . NEG ( expression ) ;
    (28) expression -> . NEG ( VAR ) ;
    (29) expression -> . NEG ( NUM ) ;

    (               shift and go to state 6
    NUM             shift and go to state 8
    VAR             shift and go to state 24
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12
    NEG             shift and go to state 13

    expression                     shift and go to state 30

state 17

    (10) expression -> expression * . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )
    (27) expression -> . NEG ( expression ) ;
    (28) expression -> . NEG ( VAR ) ;
    (29) expression -> . NEG ( NUM ) ;

    (               shift and go to state 6
    NUM             shift and go to state 8
    VAR             shift and go to state 24
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12
    NEG             shift and go to state 13

    expression                     shift and go to state 31

state 18

    (11) expression -> expression / . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )
    (27) expression -> . NEG ( expression ) ;
    (28) expression -> . NEG ( VAR ) ;
    (29) expression -> . NEG ( NUM ) ;

    (               shift and go to state 6
    NUM             shift and go to state 8
    VAR             shift and go to state 24
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12
    NEG             shift and go to state 13

    expression                     shift and go to state 32

state 19

    (12) expression -> expression CONCAT . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )
    (27) expression -> . NEG ( expression ) ;
    (28) expression -> . NEG ( VAR ) ;
    (29) expression -> . NEG ( NUM ) ;

    (               shift and go to state 6
    NUM             shift and go to state 8
    VAR             shift and go to state 24
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12
    NEG             shift and go to state 13

    expression                     shift and go to state 33

state 20

    (3) statement -> VAR = . expression ;
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )
    (27) expression -> . NEG ( expression ) ;
    (28) expression -> . NEG ( VAR ) ;
    (29) expression -> . NEG ( NUM ) ;

    (               shift and go to state 6
    NUM             shift and go to state 8
    VAR             shift and go to state 24
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12
    NEG             shift and go to state 13

    expression                     shift and go to state 34

state 21

    (24) expression -> VAR ( . arguments )
    (25) arguments -> . expression
    (26) arguments -> . expression , arguments
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )
    (27) expression -> . NEG ( expression ) ;
    (28) expression -> . NEG ( VAR ) ;
    (29) expression -> . NEG ( NUM ) ;

    (               shift and go to state 6
    NUM             shift and go to state 8
    VAR             shift and go to state 24
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12
    NEG             shift and go to state 13

    arguments                      shift and go to state 35
    expression                     shift and go to state 36

state 22

    (5) statement -> ESCREVER ( . expression ) ;
    (6) statement -> ESCREVER ( . STRING ) ;
    (7) statement -> ESCREVER ( . VAR ) ;
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )
    (27) expression -> . NEG ( expression ) ;
    (28) expression -> . NEG ( VAR ) ;
    (29) expression -> . NEG ( NUM ) ;

    STRING          shift and go to state 38
    VAR             shift and go to state 39
    (               shift and go to state 6
    NUM             shift and go to state 8
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12
    NEG             shift and go to state 13

    expression                     shift and go to state 37

state 23

    (13) expression -> ( expression . )
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    )               shift and go to state 40
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    CONCAT          shift and go to state 19


state 24

    (15) expression -> VAR .
    (24) expression -> VAR . ( arguments )

    )               reduce using rule 15 (expression -> VAR .)
    +               reduce using rule 15 (expression -> VAR .)
    -               reduce using rule 15 (expression -> VAR .)
    *               reduce using rule 15 (expression -> VAR .)
    /               reduce using rule 15 (expression -> VAR .)
    CONCAT          reduce using rule 15 (expression -> VAR .)
    ;               reduce using rule 15 (expression -> VAR .)
    $end            reduce using rule 15 (expression -> VAR .)
    ,               reduce using rule 15 (expression -> VAR .)
    (               shift and go to state 21


state 25

    (18) expression -> ENTRADA ( . )

    )               shift and go to state 41


state 26

    (19) expression -> ALEATORIO ( . NUM )
    (20) expression -> ALEATORIO ( . VAR )

    NUM             shift and go to state 42
    VAR             shift and go to state 43


state 27

    (21) expression -> FUNCAO VAR . ( params ) , : expression ;

    (               shift and go to state 44


state 28

    (27) expression -> NEG ( . expression ) ;
    (28) expression -> NEG ( . VAR ) ;
    (29) expression -> NEG ( . NUM ) ;
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )
    (27) expression -> . NEG ( expression ) ;
    (28) expression -> . NEG ( VAR ) ;
    (29) expression -> . NEG ( NUM ) ;

    VAR             shift and go to state 46
    NUM             shift and go to state 47
    (               shift and go to state 6
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12
    NEG             shift and go to state 13

    expression                     shift and go to state 45

state 29

    (8) expression -> expression + expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    ;               reduce using rule 8 (expression -> expression + expression .)
    +               reduce using rule 8 (expression -> expression + expression .)
    -               reduce using rule 8 (expression -> expression + expression .)
    CONCAT          reduce using rule 8 (expression -> expression + expression .)
    $end            reduce using rule 8 (expression -> expression + expression .)
    )               reduce using rule 8 (expression -> expression + expression .)
    ,               reduce using rule 8 (expression -> expression + expression .)
    *               shift and go to state 17
    /               shift and go to state 18

  ! *               [ reduce using rule 8 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 8 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 16 ]
  ! CONCAT          [ shift and go to state 19 ]


state 30

    (9) expression -> expression - expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    ;               reduce using rule 9 (expression -> expression - expression .)
    +               reduce using rule 9 (expression -> expression - expression .)
    -               reduce using rule 9 (expression -> expression - expression .)
    CONCAT          reduce using rule 9 (expression -> expression - expression .)
    $end            reduce using rule 9 (expression -> expression - expression .)
    )               reduce using rule 9 (expression -> expression - expression .)
    ,               reduce using rule 9 (expression -> expression - expression .)
    *               shift and go to state 17
    /               shift and go to state 18

  ! *               [ reduce using rule 9 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 9 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 16 ]
  ! CONCAT          [ shift and go to state 19 ]


state 31

    (10) expression -> expression * expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    ;               reduce using rule 10 (expression -> expression * expression .)
    +               reduce using rule 10 (expression -> expression * expression .)
    -               reduce using rule 10 (expression -> expression * expression .)
    *               reduce using rule 10 (expression -> expression * expression .)
    /               reduce using rule 10 (expression -> expression * expression .)
    CONCAT          reduce using rule 10 (expression -> expression * expression .)
    $end            reduce using rule 10 (expression -> expression * expression .)
    )               reduce using rule 10 (expression -> expression * expression .)
    ,               reduce using rule 10 (expression -> expression * expression .)

  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 16 ]
  ! *               [ shift and go to state 17 ]
  ! /               [ shift and go to state 18 ]
  ! CONCAT          [ shift and go to state 19 ]


state 32

    (11) expression -> expression / expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    ;               reduce using rule 11 (expression -> expression / expression .)
    +               reduce using rule 11 (expression -> expression / expression .)
    -               reduce using rule 11 (expression -> expression / expression .)
    *               reduce using rule 11 (expression -> expression / expression .)
    /               reduce using rule 11 (expression -> expression / expression .)
    CONCAT          reduce using rule 11 (expression -> expression / expression .)
    $end            reduce using rule 11 (expression -> expression / expression .)
    )               reduce using rule 11 (expression -> expression / expression .)
    ,               reduce using rule 11 (expression -> expression / expression .)

  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 16 ]
  ! *               [ shift and go to state 17 ]
  ! /               [ shift and go to state 18 ]
  ! CONCAT          [ shift and go to state 19 ]


state 33

    (12) expression -> expression CONCAT expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    ;               reduce using rule 12 (expression -> expression CONCAT expression .)
    +               reduce using rule 12 (expression -> expression CONCAT expression .)
    -               reduce using rule 12 (expression -> expression CONCAT expression .)
    CONCAT          reduce using rule 12 (expression -> expression CONCAT expression .)
    $end            reduce using rule 12 (expression -> expression CONCAT expression .)
    )               reduce using rule 12 (expression -> expression CONCAT expression .)
    ,               reduce using rule 12 (expression -> expression CONCAT expression .)
    *               shift and go to state 17
    /               shift and go to state 18

  ! *               [ reduce using rule 12 (expression -> expression CONCAT expression .) ]
  ! /               [ reduce using rule 12 (expression -> expression CONCAT expression .) ]
  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 16 ]
  ! CONCAT          [ shift and go to state 19 ]


state 34

    (3) statement -> VAR = expression . ;
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    ;               shift and go to state 48
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    CONCAT          shift and go to state 19


state 35

    (24) expression -> VAR ( arguments . )

    )               shift and go to state 49


state 36

    (25) arguments -> expression .
    (26) arguments -> expression . , arguments
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    )               reduce using rule 25 (arguments -> expression .)
    ,               shift and go to state 50
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    CONCAT          shift and go to state 19


state 37

    (5) statement -> ESCREVER ( expression . ) ;
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    )               shift and go to state 51
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    CONCAT          shift and go to state 19


state 38

    (6) statement -> ESCREVER ( STRING . ) ;
    (16) expression -> STRING .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 52
    +               reduce using rule 16 (expression -> STRING .)
    -               reduce using rule 16 (expression -> STRING .)
    *               reduce using rule 16 (expression -> STRING .)
    /               reduce using rule 16 (expression -> STRING .)
    CONCAT          reduce using rule 16 (expression -> STRING .)

  ! )               [ reduce using rule 16 (expression -> STRING .) ]


state 39

    (7) statement -> ESCREVER ( VAR . ) ;
    (15) expression -> VAR .
    (24) expression -> VAR . ( arguments )

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 53
    +               reduce using rule 15 (expression -> VAR .)
    -               reduce using rule 15 (expression -> VAR .)
    *               reduce using rule 15 (expression -> VAR .)
    /               reduce using rule 15 (expression -> VAR .)
    CONCAT          reduce using rule 15 (expression -> VAR .)
    (               shift and go to state 21

  ! )               [ reduce using rule 15 (expression -> VAR .) ]


state 40

    (13) expression -> ( expression ) .

    ;               reduce using rule 13 (expression -> ( expression ) .)
    +               reduce using rule 13 (expression -> ( expression ) .)
    -               reduce using rule 13 (expression -> ( expression ) .)
    *               reduce using rule 13 (expression -> ( expression ) .)
    /               reduce using rule 13 (expression -> ( expression ) .)
    CONCAT          reduce using rule 13 (expression -> ( expression ) .)
    $end            reduce using rule 13 (expression -> ( expression ) .)
    )               reduce using rule 13 (expression -> ( expression ) .)
    ,               reduce using rule 13 (expression -> ( expression ) .)


state 41

    (18) expression -> ENTRADA ( ) .

    ;               reduce using rule 18 (expression -> ENTRADA ( ) .)
    +               reduce using rule 18 (expression -> ENTRADA ( ) .)
    -               reduce using rule 18 (expression -> ENTRADA ( ) .)
    *               reduce using rule 18 (expression -> ENTRADA ( ) .)
    /               reduce using rule 18 (expression -> ENTRADA ( ) .)
    CONCAT          reduce using rule 18 (expression -> ENTRADA ( ) .)
    $end            reduce using rule 18 (expression -> ENTRADA ( ) .)
    )               reduce using rule 18 (expression -> ENTRADA ( ) .)
    ,               reduce using rule 18 (expression -> ENTRADA ( ) .)


state 42

    (19) expression -> ALEATORIO ( NUM . )

    )               shift and go to state 54


state 43

    (20) expression -> ALEATORIO ( VAR . )

    )               shift and go to state 55


state 44

    (21) expression -> FUNCAO VAR ( . params ) , : expression ;
    (22) params -> . VAR
    (23) params -> . VAR , params

    VAR             shift and go to state 56

    params                         shift and go to state 57

state 45

    (27) expression -> NEG ( expression . ) ;
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    )               shift and go to state 58
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    CONCAT          shift and go to state 19


state 46

    (28) expression -> NEG ( VAR . ) ;
    (15) expression -> VAR .
    (24) expression -> VAR . ( arguments )

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 59
    +               reduce using rule 15 (expression -> VAR .)
    -               reduce using rule 15 (expression -> VAR .)
    *               reduce using rule 15 (expression -> VAR .)
    /               reduce using rule 15 (expression -> VAR .)
    CONCAT          reduce using rule 15 (expression -> VAR .)
    (               shift and go to state 21

  ! )               [ reduce using rule 15 (expression -> VAR .) ]


state 47

    (29) expression -> NEG ( NUM . ) ;
    (14) expression -> NUM .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 60
    +               reduce using rule 14 (expression -> NUM .)
    -               reduce using rule 14 (expression -> NUM .)
    *               reduce using rule 14 (expression -> NUM .)
    /               reduce using rule 14 (expression -> NUM .)
    CONCAT          reduce using rule 14 (expression -> NUM .)

  ! )               [ reduce using rule 14 (expression -> NUM .) ]


state 48

    (3) statement -> VAR = expression ; .

    $end            reduce using rule 3 (statement -> VAR = expression ; .)


state 49

    (24) expression -> VAR ( arguments ) .

    ;               reduce using rule 24 (expression -> VAR ( arguments ) .)
    +               reduce using rule 24 (expression -> VAR ( arguments ) .)
    -               reduce using rule 24 (expression -> VAR ( arguments ) .)
    *               reduce using rule 24 (expression -> VAR ( arguments ) .)
    /               reduce using rule 24 (expression -> VAR ( arguments ) .)
    CONCAT          reduce using rule 24 (expression -> VAR ( arguments ) .)
    $end            reduce using rule 24 (expression -> VAR ( arguments ) .)
    )               reduce using rule 24 (expression -> VAR ( arguments ) .)
    ,               reduce using rule 24 (expression -> VAR ( arguments ) .)


state 50

    (26) arguments -> expression , . arguments
    (25) arguments -> . expression
    (26) arguments -> . expression , arguments
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )
    (27) expression -> . NEG ( expression ) ;
    (28) expression -> . NEG ( VAR ) ;
    (29) expression -> . NEG ( NUM ) ;

    (               shift and go to state 6
    NUM             shift and go to state 8
    VAR             shift and go to state 24
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12
    NEG             shift and go to state 13

    expression                     shift and go to state 36
    arguments                      shift and go to state 61

state 51

    (5) statement -> ESCREVER ( expression ) . ;

    ;               shift and go to state 62


state 52

    (6) statement -> ESCREVER ( STRING ) . ;

    ;               shift and go to state 63


state 53

    (7) statement -> ESCREVER ( VAR ) . ;

    ;               shift and go to state 64


state 54

    (19) expression -> ALEATORIO ( NUM ) .

    ;               reduce using rule 19 (expression -> ALEATORIO ( NUM ) .)
    +               reduce using rule 19 (expression -> ALEATORIO ( NUM ) .)
    -               reduce using rule 19 (expression -> ALEATORIO ( NUM ) .)
    *               reduce using rule 19 (expression -> ALEATORIO ( NUM ) .)
    /               reduce using rule 19 (expression -> ALEATORIO ( NUM ) .)
    CONCAT          reduce using rule 19 (expression -> ALEATORIO ( NUM ) .)
    $end            reduce using rule 19 (expression -> ALEATORIO ( NUM ) .)
    )               reduce using rule 19 (expression -> ALEATORIO ( NUM ) .)
    ,               reduce using rule 19 (expression -> ALEATORIO ( NUM ) .)


state 55

    (20) expression -> ALEATORIO ( VAR ) .

    ;               reduce using rule 20 (expression -> ALEATORIO ( VAR ) .)
    +               reduce using rule 20 (expression -> ALEATORIO ( VAR ) .)
    -               reduce using rule 20 (expression -> ALEATORIO ( VAR ) .)
    *               reduce using rule 20 (expression -> ALEATORIO ( VAR ) .)
    /               reduce using rule 20 (expression -> ALEATORIO ( VAR ) .)
    CONCAT          reduce using rule 20 (expression -> ALEATORIO ( VAR ) .)
    $end            reduce using rule 20 (expression -> ALEATORIO ( VAR ) .)
    )               reduce using rule 20 (expression -> ALEATORIO ( VAR ) .)
    ,               reduce using rule 20 (expression -> ALEATORIO ( VAR ) .)


state 56

    (22) params -> VAR .
    (23) params -> VAR . , params

    )               reduce using rule 22 (params -> VAR .)
    ,               shift and go to state 65


state 57

    (21) expression -> FUNCAO VAR ( params . ) , : expression ;

    )               shift and go to state 66


state 58

    (27) expression -> NEG ( expression ) . ;

    ;               shift and go to state 67


state 59

    (28) expression -> NEG ( VAR ) . ;

    ;               shift and go to state 68


state 60

    (29) expression -> NEG ( NUM ) . ;

    ;               shift and go to state 69


state 61

    (26) arguments -> expression , arguments .

    )               reduce using rule 26 (arguments -> expression , arguments .)


state 62

    (5) statement -> ESCREVER ( expression ) ; .

    $end            reduce using rule 5 (statement -> ESCREVER ( expression ) ; .)


state 63

    (6) statement -> ESCREVER ( STRING ) ; .

    $end            reduce using rule 6 (statement -> ESCREVER ( STRING ) ; .)


state 64

    (7) statement -> ESCREVER ( VAR ) ; .

    $end            reduce using rule 7 (statement -> ESCREVER ( VAR ) ; .)


state 65

    (23) params -> VAR , . params
    (22) params -> . VAR
    (23) params -> . VAR , params

    VAR             shift and go to state 56

    params                         shift and go to state 70

state 66

    (21) expression -> FUNCAO VAR ( params ) . , : expression ;

    ,               shift and go to state 71


state 67

    (27) expression -> NEG ( expression ) ; .

    ;               reduce using rule 27 (expression -> NEG ( expression ) ; .)
    +               reduce using rule 27 (expression -> NEG ( expression ) ; .)
    -               reduce using rule 27 (expression -> NEG ( expression ) ; .)
    *               reduce using rule 27 (expression -> NEG ( expression ) ; .)
    /               reduce using rule 27 (expression -> NEG ( expression ) ; .)
    CONCAT          reduce using rule 27 (expression -> NEG ( expression ) ; .)
    $end            reduce using rule 27 (expression -> NEG ( expression ) ; .)
    )               reduce using rule 27 (expression -> NEG ( expression ) ; .)
    ,               reduce using rule 27 (expression -> NEG ( expression ) ; .)


state 68

    (28) expression -> NEG ( VAR ) ; .

    ;               reduce using rule 28 (expression -> NEG ( VAR ) ; .)
    +               reduce using rule 28 (expression -> NEG ( VAR ) ; .)
    -               reduce using rule 28 (expression -> NEG ( VAR ) ; .)
    *               reduce using rule 28 (expression -> NEG ( VAR ) ; .)
    /               reduce using rule 28 (expression -> NEG ( VAR ) ; .)
    CONCAT          reduce using rule 28 (expression -> NEG ( VAR ) ; .)
    $end            reduce using rule 28 (expression -> NEG ( VAR ) ; .)
    )               reduce using rule 28 (expression -> NEG ( VAR ) ; .)
    ,               reduce using rule 28 (expression -> NEG ( VAR ) ; .)


state 69

    (29) expression -> NEG ( NUM ) ; .

    ;               reduce using rule 29 (expression -> NEG ( NUM ) ; .)
    +               reduce using rule 29 (expression -> NEG ( NUM ) ; .)
    -               reduce using rule 29 (expression -> NEG ( NUM ) ; .)
    *               reduce using rule 29 (expression -> NEG ( NUM ) ; .)
    /               reduce using rule 29 (expression -> NEG ( NUM ) ; .)
    CONCAT          reduce using rule 29 (expression -> NEG ( NUM ) ; .)
    $end            reduce using rule 29 (expression -> NEG ( NUM ) ; .)
    )               reduce using rule 29 (expression -> NEG ( NUM ) ; .)
    ,               reduce using rule 29 (expression -> NEG ( NUM ) ; .)


state 70

    (23) params -> VAR , params .

    )               reduce using rule 23 (params -> VAR , params .)


state 71

    (21) expression -> FUNCAO VAR ( params ) , . : expression ;

    :               shift and go to state 72


state 72

    (21) expression -> FUNCAO VAR ( params ) , : . expression ;
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )
    (27) expression -> . NEG ( expression ) ;
    (28) expression -> . NEG ( VAR ) ;
    (29) expression -> . NEG ( NUM ) ;

    (               shift and go to state 6
    NUM             shift and go to state 8
    VAR             shift and go to state 24
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12
    NEG             shift and go to state 13

    expression                     shift and go to state 73

state 73

    (21) expression -> FUNCAO VAR ( params ) , : expression . ;
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    ;               shift and go to state 74
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    CONCAT          shift and go to state 19


state 74

    (21) expression -> FUNCAO VAR ( params ) , : expression ; .

    ;               reduce using rule 21 (expression -> FUNCAO VAR ( params ) , : expression ; .)
    +               reduce using rule 21 (expression -> FUNCAO VAR ( params ) , : expression ; .)
    -               reduce using rule 21 (expression -> FUNCAO VAR ( params ) , : expression ; .)
    *               reduce using rule 21 (expression -> FUNCAO VAR ( params ) , : expression ; .)
    /               reduce using rule 21 (expression -> FUNCAO VAR ( params ) , : expression ; .)
    CONCAT          reduce using rule 21 (expression -> FUNCAO VAR ( params ) , : expression ; .)
    $end            reduce using rule 21 (expression -> FUNCAO VAR ( params ) , : expression ; .)
    )               reduce using rule 21 (expression -> FUNCAO VAR ( params ) , : expression ; .)
    ,               reduce using rule 21 (expression -> FUNCAO VAR ( params ) , : expression ; .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ) in state 38 resolved as shift
WARNING: shift/reduce conflict for ) in state 39 resolved as shift
WARNING: shift/reduce conflict for ) in state 46 resolved as shift
WARNING: shift/reduce conflict for ) in state 47 resolved as shift
