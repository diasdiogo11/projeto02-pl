Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FIM
    FOLD
    MAP

Grammar

Rule 0     S' -> start
Rule 1     start -> statement
Rule 2     start -> expression
Rule 3     statement -> VAR = expression ;
Rule 4     statement -> expression ;
Rule 5     statement -> ESCREVER ( expression ) ;
Rule 6     statement -> ESCREVER ( STRING ) ;
Rule 7     statement -> ESCREVER ( VAR ) ;
Rule 8     expression -> expression + expression
Rule 9     expression -> expression - expression
Rule 10    expression -> expression * expression
Rule 11    expression -> expression / expression
Rule 12    expression -> expression CONCAT expression
Rule 13    expression -> ( expression )
Rule 14    expression -> NUM
Rule 15    expression -> VAR
Rule 16    expression -> STRING
Rule 17    expression -> LIST
Rule 18    expression -> ENTRADA ( )
Rule 19    expression -> ALEATORIO ( NUM )
Rule 20    expression -> ALEATORIO ( VAR )
Rule 21    expression -> FUNCAO VAR ( params ) , : expression ;
Rule 22    params -> VAR
Rule 23    params -> VAR , params
Rule 24    expression -> VAR ( arguments )
Rule 25    arguments -> expression
Rule 26    arguments -> expression , arguments

Terminals, with rules where they appear

(                    : 5 6 7 13 18 19 20 21 24
)                    : 5 6 7 13 18 19 20 21 24
*                    : 10
+                    : 8
,                    : 21 23 26
-                    : 9
/                    : 11
:                    : 21
;                    : 3 4 5 6 7 21
=                    : 3
ALEATORIO            : 19 20
CONCAT               : 12
ENTRADA              : 18
ESCREVER             : 5 6 7
FIM                  : 
FOLD                 : 
FUNCAO               : 21
LIST                 : 17
MAP                  : 
NUM                  : 14 19
STRING               : 6 16
VAR                  : 3 7 15 20 21 22 23 24
error                : 

Nonterminals, with rules where they appear

arguments            : 24 26
expression           : 2 3 4 5 8 8 9 9 10 10 11 11 12 12 13 21 25 26
params               : 21 23
start                : 0
statement            : 1

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . statement
    (2) start -> . expression
    (3) statement -> . VAR = expression ;
    (4) statement -> . expression ;
    (5) statement -> . ESCREVER ( expression ) ;
    (6) statement -> . ESCREVER ( STRING ) ;
    (7) statement -> . ESCREVER ( VAR ) ;
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )

    VAR             shift and go to state 4
    ESCREVER        shift and go to state 5
    (               shift and go to state 6
    NUM             shift and go to state 8
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12

    start                          shift and go to state 1
    statement                      shift and go to state 2
    expression                     shift and go to state 3

state 1

    (0) S' -> start .



state 2

    (1) start -> statement .

    $end            reduce using rule 1 (start -> statement .)


state 3

    (2) start -> expression .
    (4) statement -> expression . ;
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    $end            reduce using rule 2 (start -> expression .)
    ;               shift and go to state 13
    +               shift and go to state 14
    -               shift and go to state 15
    *               shift and go to state 16
    /               shift and go to state 17
    CONCAT          shift and go to state 18


state 4

    (3) statement -> VAR . = expression ;
    (15) expression -> VAR .
    (24) expression -> VAR . ( arguments )

    =               shift and go to state 19
    ;               reduce using rule 15 (expression -> VAR .)
    +               reduce using rule 15 (expression -> VAR .)
    -               reduce using rule 15 (expression -> VAR .)
    *               reduce using rule 15 (expression -> VAR .)
    /               reduce using rule 15 (expression -> VAR .)
    CONCAT          reduce using rule 15 (expression -> VAR .)
    $end            reduce using rule 15 (expression -> VAR .)
    (               shift and go to state 20


state 5

    (5) statement -> ESCREVER . ( expression ) ;
    (6) statement -> ESCREVER . ( STRING ) ;
    (7) statement -> ESCREVER . ( VAR ) ;

    (               shift and go to state 21


state 6

    (13) expression -> ( . expression )
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )

    (               shift and go to state 6
    NUM             shift and go to state 8
    VAR             shift and go to state 23
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12

    expression                     shift and go to state 22

state 7

    (16) expression -> STRING .

    ;               reduce using rule 16 (expression -> STRING .)
    +               reduce using rule 16 (expression -> STRING .)
    -               reduce using rule 16 (expression -> STRING .)
    *               reduce using rule 16 (expression -> STRING .)
    /               reduce using rule 16 (expression -> STRING .)
    CONCAT          reduce using rule 16 (expression -> STRING .)
    $end            reduce using rule 16 (expression -> STRING .)
    )               reduce using rule 16 (expression -> STRING .)
    ,               reduce using rule 16 (expression -> STRING .)


state 8

    (14) expression -> NUM .

    ;               reduce using rule 14 (expression -> NUM .)
    +               reduce using rule 14 (expression -> NUM .)
    -               reduce using rule 14 (expression -> NUM .)
    *               reduce using rule 14 (expression -> NUM .)
    /               reduce using rule 14 (expression -> NUM .)
    CONCAT          reduce using rule 14 (expression -> NUM .)
    $end            reduce using rule 14 (expression -> NUM .)
    )               reduce using rule 14 (expression -> NUM .)
    ,               reduce using rule 14 (expression -> NUM .)


state 9

    (17) expression -> LIST .

    ;               reduce using rule 17 (expression -> LIST .)
    +               reduce using rule 17 (expression -> LIST .)
    -               reduce using rule 17 (expression -> LIST .)
    *               reduce using rule 17 (expression -> LIST .)
    /               reduce using rule 17 (expression -> LIST .)
    CONCAT          reduce using rule 17 (expression -> LIST .)
    $end            reduce using rule 17 (expression -> LIST .)
    )               reduce using rule 17 (expression -> LIST .)
    ,               reduce using rule 17 (expression -> LIST .)


state 10

    (18) expression -> ENTRADA . ( )

    (               shift and go to state 24


state 11

    (19) expression -> ALEATORIO . ( NUM )
    (20) expression -> ALEATORIO . ( VAR )

    (               shift and go to state 25


state 12

    (21) expression -> FUNCAO . VAR ( params ) , : expression ;

    VAR             shift and go to state 26


state 13

    (4) statement -> expression ; .

    $end            reduce using rule 4 (statement -> expression ; .)


state 14

    (8) expression -> expression + . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )

    (               shift and go to state 6
    NUM             shift and go to state 8
    VAR             shift and go to state 23
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12

    expression                     shift and go to state 27

state 15

    (9) expression -> expression - . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )

    (               shift and go to state 6
    NUM             shift and go to state 8
    VAR             shift and go to state 23
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12

    expression                     shift and go to state 28

state 16

    (10) expression -> expression * . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )

    (               shift and go to state 6
    NUM             shift and go to state 8
    VAR             shift and go to state 23
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12

    expression                     shift and go to state 29

state 17

    (11) expression -> expression / . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )

    (               shift and go to state 6
    NUM             shift and go to state 8
    VAR             shift and go to state 23
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12

    expression                     shift and go to state 30

state 18

    (12) expression -> expression CONCAT . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )

    (               shift and go to state 6
    NUM             shift and go to state 8
    VAR             shift and go to state 23
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12

    expression                     shift and go to state 31

state 19

    (3) statement -> VAR = . expression ;
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )

    (               shift and go to state 6
    NUM             shift and go to state 8
    VAR             shift and go to state 23
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12

    expression                     shift and go to state 32

state 20

    (24) expression -> VAR ( . arguments )
    (25) arguments -> . expression
    (26) arguments -> . expression , arguments
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )

    (               shift and go to state 6
    NUM             shift and go to state 8
    VAR             shift and go to state 23
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12

    arguments                      shift and go to state 33
    expression                     shift and go to state 34

state 21

    (5) statement -> ESCREVER ( . expression ) ;
    (6) statement -> ESCREVER ( . STRING ) ;
    (7) statement -> ESCREVER ( . VAR ) ;
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )

    STRING          shift and go to state 36
    VAR             shift and go to state 37
    (               shift and go to state 6
    NUM             shift and go to state 8
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12

    expression                     shift and go to state 35

state 22

    (13) expression -> ( expression . )
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    )               shift and go to state 38
    +               shift and go to state 14
    -               shift and go to state 15
    *               shift and go to state 16
    /               shift and go to state 17
    CONCAT          shift and go to state 18


state 23

    (15) expression -> VAR .
    (24) expression -> VAR . ( arguments )

    )               reduce using rule 15 (expression -> VAR .)
    +               reduce using rule 15 (expression -> VAR .)
    -               reduce using rule 15 (expression -> VAR .)
    *               reduce using rule 15 (expression -> VAR .)
    /               reduce using rule 15 (expression -> VAR .)
    CONCAT          reduce using rule 15 (expression -> VAR .)
    ;               reduce using rule 15 (expression -> VAR .)
    $end            reduce using rule 15 (expression -> VAR .)
    ,               reduce using rule 15 (expression -> VAR .)
    (               shift and go to state 20


state 24

    (18) expression -> ENTRADA ( . )

    )               shift and go to state 39


state 25

    (19) expression -> ALEATORIO ( . NUM )
    (20) expression -> ALEATORIO ( . VAR )

    NUM             shift and go to state 40
    VAR             shift and go to state 41


state 26

    (21) expression -> FUNCAO VAR . ( params ) , : expression ;

    (               shift and go to state 42


state 27

    (8) expression -> expression + expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    ;               reduce using rule 8 (expression -> expression + expression .)
    +               reduce using rule 8 (expression -> expression + expression .)
    -               reduce using rule 8 (expression -> expression + expression .)
    CONCAT          reduce using rule 8 (expression -> expression + expression .)
    $end            reduce using rule 8 (expression -> expression + expression .)
    )               reduce using rule 8 (expression -> expression + expression .)
    ,               reduce using rule 8 (expression -> expression + expression .)
    *               shift and go to state 16
    /               shift and go to state 17

  ! *               [ reduce using rule 8 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 8 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 14 ]
  ! -               [ shift and go to state 15 ]
  ! CONCAT          [ shift and go to state 18 ]


state 28

    (9) expression -> expression - expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    ;               reduce using rule 9 (expression -> expression - expression .)
    +               reduce using rule 9 (expression -> expression - expression .)
    -               reduce using rule 9 (expression -> expression - expression .)
    CONCAT          reduce using rule 9 (expression -> expression - expression .)
    $end            reduce using rule 9 (expression -> expression - expression .)
    )               reduce using rule 9 (expression -> expression - expression .)
    ,               reduce using rule 9 (expression -> expression - expression .)
    *               shift and go to state 16
    /               shift and go to state 17

  ! *               [ reduce using rule 9 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 9 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 14 ]
  ! -               [ shift and go to state 15 ]
  ! CONCAT          [ shift and go to state 18 ]


state 29

    (10) expression -> expression * expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    ;               reduce using rule 10 (expression -> expression * expression .)
    +               reduce using rule 10 (expression -> expression * expression .)
    -               reduce using rule 10 (expression -> expression * expression .)
    *               reduce using rule 10 (expression -> expression * expression .)
    /               reduce using rule 10 (expression -> expression * expression .)
    CONCAT          reduce using rule 10 (expression -> expression * expression .)
    $end            reduce using rule 10 (expression -> expression * expression .)
    )               reduce using rule 10 (expression -> expression * expression .)
    ,               reduce using rule 10 (expression -> expression * expression .)

  ! +               [ shift and go to state 14 ]
  ! -               [ shift and go to state 15 ]
  ! *               [ shift and go to state 16 ]
  ! /               [ shift and go to state 17 ]
  ! CONCAT          [ shift and go to state 18 ]


state 30

    (11) expression -> expression / expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    ;               reduce using rule 11 (expression -> expression / expression .)
    +               reduce using rule 11 (expression -> expression / expression .)
    -               reduce using rule 11 (expression -> expression / expression .)
    *               reduce using rule 11 (expression -> expression / expression .)
    /               reduce using rule 11 (expression -> expression / expression .)
    CONCAT          reduce using rule 11 (expression -> expression / expression .)
    $end            reduce using rule 11 (expression -> expression / expression .)
    )               reduce using rule 11 (expression -> expression / expression .)
    ,               reduce using rule 11 (expression -> expression / expression .)

  ! +               [ shift and go to state 14 ]
  ! -               [ shift and go to state 15 ]
  ! *               [ shift and go to state 16 ]
  ! /               [ shift and go to state 17 ]
  ! CONCAT          [ shift and go to state 18 ]


state 31

    (12) expression -> expression CONCAT expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    ;               reduce using rule 12 (expression -> expression CONCAT expression .)
    +               reduce using rule 12 (expression -> expression CONCAT expression .)
    -               reduce using rule 12 (expression -> expression CONCAT expression .)
    CONCAT          reduce using rule 12 (expression -> expression CONCAT expression .)
    $end            reduce using rule 12 (expression -> expression CONCAT expression .)
    )               reduce using rule 12 (expression -> expression CONCAT expression .)
    ,               reduce using rule 12 (expression -> expression CONCAT expression .)
    *               shift and go to state 16
    /               shift and go to state 17

  ! *               [ reduce using rule 12 (expression -> expression CONCAT expression .) ]
  ! /               [ reduce using rule 12 (expression -> expression CONCAT expression .) ]
  ! +               [ shift and go to state 14 ]
  ! -               [ shift and go to state 15 ]
  ! CONCAT          [ shift and go to state 18 ]


state 32

    (3) statement -> VAR = expression . ;
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    ;               shift and go to state 43
    +               shift and go to state 14
    -               shift and go to state 15
    *               shift and go to state 16
    /               shift and go to state 17
    CONCAT          shift and go to state 18


state 33

    (24) expression -> VAR ( arguments . )

    )               shift and go to state 44


state 34

    (25) arguments -> expression .
    (26) arguments -> expression . , arguments
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    )               reduce using rule 25 (arguments -> expression .)
    ,               shift and go to state 45
    +               shift and go to state 14
    -               shift and go to state 15
    *               shift and go to state 16
    /               shift and go to state 17
    CONCAT          shift and go to state 18


state 35

    (5) statement -> ESCREVER ( expression . ) ;
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    )               shift and go to state 46
    +               shift and go to state 14
    -               shift and go to state 15
    *               shift and go to state 16
    /               shift and go to state 17
    CONCAT          shift and go to state 18


state 36

    (6) statement -> ESCREVER ( STRING . ) ;
    (16) expression -> STRING .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 47
    +               reduce using rule 16 (expression -> STRING .)
    -               reduce using rule 16 (expression -> STRING .)
    *               reduce using rule 16 (expression -> STRING .)
    /               reduce using rule 16 (expression -> STRING .)
    CONCAT          reduce using rule 16 (expression -> STRING .)

  ! )               [ reduce using rule 16 (expression -> STRING .) ]


state 37

    (7) statement -> ESCREVER ( VAR . ) ;
    (15) expression -> VAR .
    (24) expression -> VAR . ( arguments )

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 48
    +               reduce using rule 15 (expression -> VAR .)
    -               reduce using rule 15 (expression -> VAR .)
    *               reduce using rule 15 (expression -> VAR .)
    /               reduce using rule 15 (expression -> VAR .)
    CONCAT          reduce using rule 15 (expression -> VAR .)
    (               shift and go to state 20

  ! )               [ reduce using rule 15 (expression -> VAR .) ]


state 38

    (13) expression -> ( expression ) .

    ;               reduce using rule 13 (expression -> ( expression ) .)
    +               reduce using rule 13 (expression -> ( expression ) .)
    -               reduce using rule 13 (expression -> ( expression ) .)
    *               reduce using rule 13 (expression -> ( expression ) .)
    /               reduce using rule 13 (expression -> ( expression ) .)
    CONCAT          reduce using rule 13 (expression -> ( expression ) .)
    $end            reduce using rule 13 (expression -> ( expression ) .)
    )               reduce using rule 13 (expression -> ( expression ) .)
    ,               reduce using rule 13 (expression -> ( expression ) .)


state 39

    (18) expression -> ENTRADA ( ) .

    ;               reduce using rule 18 (expression -> ENTRADA ( ) .)
    +               reduce using rule 18 (expression -> ENTRADA ( ) .)
    -               reduce using rule 18 (expression -> ENTRADA ( ) .)
    *               reduce using rule 18 (expression -> ENTRADA ( ) .)
    /               reduce using rule 18 (expression -> ENTRADA ( ) .)
    CONCAT          reduce using rule 18 (expression -> ENTRADA ( ) .)
    $end            reduce using rule 18 (expression -> ENTRADA ( ) .)
    )               reduce using rule 18 (expression -> ENTRADA ( ) .)
    ,               reduce using rule 18 (expression -> ENTRADA ( ) .)


state 40

    (19) expression -> ALEATORIO ( NUM . )

    )               shift and go to state 49


state 41

    (20) expression -> ALEATORIO ( VAR . )

    )               shift and go to state 50


state 42

    (21) expression -> FUNCAO VAR ( . params ) , : expression ;
    (22) params -> . VAR
    (23) params -> . VAR , params

    VAR             shift and go to state 51

    params                         shift and go to state 52

state 43

    (3) statement -> VAR = expression ; .

    $end            reduce using rule 3 (statement -> VAR = expression ; .)


state 44

    (24) expression -> VAR ( arguments ) .

    ;               reduce using rule 24 (expression -> VAR ( arguments ) .)
    +               reduce using rule 24 (expression -> VAR ( arguments ) .)
    -               reduce using rule 24 (expression -> VAR ( arguments ) .)
    *               reduce using rule 24 (expression -> VAR ( arguments ) .)
    /               reduce using rule 24 (expression -> VAR ( arguments ) .)
    CONCAT          reduce using rule 24 (expression -> VAR ( arguments ) .)
    $end            reduce using rule 24 (expression -> VAR ( arguments ) .)
    )               reduce using rule 24 (expression -> VAR ( arguments ) .)
    ,               reduce using rule 24 (expression -> VAR ( arguments ) .)


state 45

    (26) arguments -> expression , . arguments
    (25) arguments -> . expression
    (26) arguments -> . expression , arguments
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )

    (               shift and go to state 6
    NUM             shift and go to state 8
    VAR             shift and go to state 23
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12

    expression                     shift and go to state 34
    arguments                      shift and go to state 53

state 46

    (5) statement -> ESCREVER ( expression ) . ;

    ;               shift and go to state 54


state 47

    (6) statement -> ESCREVER ( STRING ) . ;

    ;               shift and go to state 55


state 48

    (7) statement -> ESCREVER ( VAR ) . ;

    ;               shift and go to state 56


state 49

    (19) expression -> ALEATORIO ( NUM ) .

    ;               reduce using rule 19 (expression -> ALEATORIO ( NUM ) .)
    +               reduce using rule 19 (expression -> ALEATORIO ( NUM ) .)
    -               reduce using rule 19 (expression -> ALEATORIO ( NUM ) .)
    *               reduce using rule 19 (expression -> ALEATORIO ( NUM ) .)
    /               reduce using rule 19 (expression -> ALEATORIO ( NUM ) .)
    CONCAT          reduce using rule 19 (expression -> ALEATORIO ( NUM ) .)
    $end            reduce using rule 19 (expression -> ALEATORIO ( NUM ) .)
    )               reduce using rule 19 (expression -> ALEATORIO ( NUM ) .)
    ,               reduce using rule 19 (expression -> ALEATORIO ( NUM ) .)


state 50

    (20) expression -> ALEATORIO ( VAR ) .

    ;               reduce using rule 20 (expression -> ALEATORIO ( VAR ) .)
    +               reduce using rule 20 (expression -> ALEATORIO ( VAR ) .)
    -               reduce using rule 20 (expression -> ALEATORIO ( VAR ) .)
    *               reduce using rule 20 (expression -> ALEATORIO ( VAR ) .)
    /               reduce using rule 20 (expression -> ALEATORIO ( VAR ) .)
    CONCAT          reduce using rule 20 (expression -> ALEATORIO ( VAR ) .)
    $end            reduce using rule 20 (expression -> ALEATORIO ( VAR ) .)
    )               reduce using rule 20 (expression -> ALEATORIO ( VAR ) .)
    ,               reduce using rule 20 (expression -> ALEATORIO ( VAR ) .)


state 51

    (22) params -> VAR .
    (23) params -> VAR . , params

    )               reduce using rule 22 (params -> VAR .)
    ,               shift and go to state 57


state 52

    (21) expression -> FUNCAO VAR ( params . ) , : expression ;

    )               shift and go to state 58


state 53

    (26) arguments -> expression , arguments .

    )               reduce using rule 26 (arguments -> expression , arguments .)


state 54

    (5) statement -> ESCREVER ( expression ) ; .

    $end            reduce using rule 5 (statement -> ESCREVER ( expression ) ; .)


state 55

    (6) statement -> ESCREVER ( STRING ) ; .

    $end            reduce using rule 6 (statement -> ESCREVER ( STRING ) ; .)


state 56

    (7) statement -> ESCREVER ( VAR ) ; .

    $end            reduce using rule 7 (statement -> ESCREVER ( VAR ) ; .)


state 57

    (23) params -> VAR , . params
    (22) params -> . VAR
    (23) params -> . VAR , params

    VAR             shift and go to state 51

    params                         shift and go to state 59

state 58

    (21) expression -> FUNCAO VAR ( params ) . , : expression ;

    ,               shift and go to state 60


state 59

    (23) params -> VAR , params .

    )               reduce using rule 23 (params -> VAR , params .)


state 60

    (21) expression -> FUNCAO VAR ( params ) , . : expression ;

    :               shift and go to state 61


state 61

    (21) expression -> FUNCAO VAR ( params ) , : . expression ;
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression CONCAT expression
    (13) expression -> . ( expression )
    (14) expression -> . NUM
    (15) expression -> . VAR
    (16) expression -> . STRING
    (17) expression -> . LIST
    (18) expression -> . ENTRADA ( )
    (19) expression -> . ALEATORIO ( NUM )
    (20) expression -> . ALEATORIO ( VAR )
    (21) expression -> . FUNCAO VAR ( params ) , : expression ;
    (24) expression -> . VAR ( arguments )

    (               shift and go to state 6
    NUM             shift and go to state 8
    VAR             shift and go to state 23
    STRING          shift and go to state 7
    LIST            shift and go to state 9
    ENTRADA         shift and go to state 10
    ALEATORIO       shift and go to state 11
    FUNCAO          shift and go to state 12

    expression                     shift and go to state 62

state 62

    (21) expression -> FUNCAO VAR ( params ) , : expression . ;
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . CONCAT expression

    ;               shift and go to state 63
    +               shift and go to state 14
    -               shift and go to state 15
    *               shift and go to state 16
    /               shift and go to state 17
    CONCAT          shift and go to state 18


state 63

    (21) expression -> FUNCAO VAR ( params ) , : expression ; .

    ;               reduce using rule 21 (expression -> FUNCAO VAR ( params ) , : expression ; .)
    +               reduce using rule 21 (expression -> FUNCAO VAR ( params ) , : expression ; .)
    -               reduce using rule 21 (expression -> FUNCAO VAR ( params ) , : expression ; .)
    *               reduce using rule 21 (expression -> FUNCAO VAR ( params ) , : expression ; .)
    /               reduce using rule 21 (expression -> FUNCAO VAR ( params ) , : expression ; .)
    CONCAT          reduce using rule 21 (expression -> FUNCAO VAR ( params ) , : expression ; .)
    $end            reduce using rule 21 (expression -> FUNCAO VAR ( params ) , : expression ; .)
    )               reduce using rule 21 (expression -> FUNCAO VAR ( params ) , : expression ; .)
    ,               reduce using rule 21 (expression -> FUNCAO VAR ( params ) , : expression ; .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ) in state 36 resolved as shift
WARNING: shift/reduce conflict for ) in state 37 resolved as shift
